---
// NOTE: This file might go in ../integration package,
// so everything purely Astro-related will be in one place,
// but some deps issues prevent this.
import path from 'path';
import { kebabCase } from 'lodash-es';
/* ·········································································· */
import { collect } from '@astro-content/server/collect';
import { log, setLogLevel } from '@astro-content/server/logger';
import { isValidContentBase } from '@astro-content/server/setup';
import { getTrio } from '@astro-content/server/utils';
/* ·········································································· */
import Layout from './layouts/Default.astro';
import App from './components/App/App';
/* —————————————————————————————————————————————————————————————————————————— */

setLogLevel(import.meta.env.PUBLIC_LOG_LEVEL || 'info');
log(`Log level: ${import.meta.env.PUBLIC_LOG_LEVEL}`);
log('SSR entrypoint loaded', 'info', 'pretty');

const isValid = isValidContentBase();
// NOTE: Check is done once, not updating (yet)
if (isValid) {
  await collect(
    // TODO: Add jsonc/json
    Astro.glob('/content/**/*.{md,mdx,yaml}'),
    // IDEA: `editMode` could be `mode: 'default' | 'edit' | 'api'`…?
    { editMode: true },
  ).then((instances) => {
    log(instances, 'absurd');
  });

  // TODO: Find a pretty and handy way to handle multiple content bases
  // await collect(
  //   Astro.glob('/node_modules/@astro-content/demo/content/**/*.{md,mdx,yaml}'),
  //   { editMode: true },
  // );
}

// HACK: For ssr-entrypoint first load
// Tried pre-triggering inside hooks etc. didn't worked
const firstLoad = `
window.loaded = false;
// setTimeout(() => {
//   if (globalThis.loaded === false) {
//     location.reload();
//     console.log('Reloading…');
//   }
// }, 1000);`;

export async function getStaticPaths() {
  const contentFiles = import.meta.glob('/content/**/*.{md,mdx,yaml}');

  const paths: { params: { path: string } }[] = [
    /* Home */
    // NOTE: Cannot be undefined, but should be?
    { params: { path: undefined } },
  ];

  await Promise.all(
    Object.entries(contentFiles).map(async ([rawPath]) => {
      const { first, second, third } = getTrio(rawPath);
      const trioPath = path.join(
        kebabCase(first),
        kebabCase(second),
        kebabCase(third) ?? '',
      );
      log({ trioPath });
      paths.push({ params: { path: trioPath } });
    }),
  );

  const schemas = import.meta.glob('/content/**/*.schema.yaml');

  await Promise.all(
    Object.entries(schemas).map(async ([rawPath]) => {
      const { second } = getTrio(rawPath);

      paths.push({ params: { path: kebabCase(second) } });
    }),
  );

  return paths;
}
---

<Layout>
  <App client:load isValidContentBase={isValid}>
    <script set:html={firstLoad}></script>
  </App>
</Layout>

<script>
  // FIXME: `import/extensions` rule not taking effect for client side Astro JS?
  // eslint-disable-next-line import/extensions
  import { log } from './logger';

  log(`Log level: ${import.meta.env.PUBLIC_LOG_LEVEL}`);
  log('GUI entrypoint loaded', 'info', 'pretty');
</script>
