---
import type { MarkdownInstance } from 'astro';
import { Debug } from 'astro/components';
import path from 'path';
import fs from 'fs/promises';
import Layout from './layouts/Preview.astro';
import { log } from './logger';
/* —————————————————————————————————————————————————————————————————————————— */

// NOTE: Using `import.meta.glob` instead of Astro.glob so we can import
// just what we need, on-time, for a huge speed boost.
//  IDEA: Generalize this behavior? Would solve some general performance issues.
// During file collection, could cherry pick data depending on user intent.

const imports = import.meta.glob('/content/**/*.{md,mdx}');
log({ imports }, 'absurd');

// NOTE: Doing mumbo jumbo because you can't fetch with
// `Astro.url.searchParams.get('file')` in SSG mode (intended).
// Instead using file path encoded as one URL segment (bit dirty).
export async function getStaticPaths() {
  const impts = import.meta.glob('/content/**/*.{md,mdx}');

  const paths: { params: { file: string } }[] = [];

  await Promise.all(
    Object.entries(impts).map(async ([rawPath]) => {
      const file = await fs.realpath(path.join(process.cwd(), rawPath));
      log({ rawPath, file });

      paths.push({
        params: { file },
      });
    }),
  );

  return paths;
}
const { file } = Astro.params;

log({ sFile: file }, 'absurd');

// NOTE: Discrepancy between Astro and Vite file resolution through
// symbolic links folders. Astro keeps the virtual path.
// Not Vite which gives the real path.
// So for now we can't use symbolic links anymore (maybe for the good?).
const relFile = path.relative(process.cwd(), String(file));

const comp = (await imports[`/${relFile}`]()) as MarkdownInstance<
  Record<string, unknown>
>;
---

<Layout>
  <Fragment slot="body">
    <!-- <Debug {{comp, file, relFile}} /> -->
    <div id="preview">
      <div class="markdown-body">
        <comp.Content />
      </div>
    </div>
  </Fragment>
</Layout>
