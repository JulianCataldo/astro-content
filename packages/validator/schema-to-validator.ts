import fs from 'node:fs/promises';
import path from 'node:path';
import yaml from 'yaml';
import glob from 'glob-promise';
import { compile } from 'json-schema-to-typescript';
import { pascalCase } from 'change-case';
// import $RefParser from '@apidevtools/json-schema-ref-parser';
import type { JSONSchema4, JSONSchema7 } from 'json-schema';
/* ========================================================================== */

export async function generateChecker(
  schemaPath: string,
  outDir: string | undefined,
) {
  const file = await fs.readFile(schemaPath, 'utf8');

  const schema = yaml.parse(file) as JSONSchema7;
  const checkerDir: string = outDir ?? path.dirname(schemaPath);

  const extension = '.checker.ts';
  const schemaName = path.basename(schemaPath).split('.')[0];
  const checkerFileName = `${schemaName}${extension}`;
  const checkerPath = path.join(checkerDir, checkerFileName);
  console.log(`â†’ ${checkerPath}`);

  // const refs = await $RefParser.resolve(schemaPath).then((api) => api.paths());

  const iFace = pascalCase(
    path.basename(schemaPath, path.extname(schemaPath)).replace('.schema', ''),
  );

  const compiled = await compile(schema as JSONSchema4, iFace, {
    cwd: path.dirname(schemaPath),
    // declareExternallyReferenced: false,
    // unreachableDefinitions: false,
    bannerComment: '',
    // IDEA: Might be better to not embed the schema into the validator itself.
    // It's a performance vs. dedup. choice.
    // bannerComment: `${refs
    //   .map(
    //     (r) =>
    //       `// import ${path.basename(
    //         schemaPath,
    //         path.extname(schemaPath),
    //       )} from "${path.relative(process.cwd(), r)}"`,
    //   )
    //   .join('\n')}`,
  }).catch((e) => {
    console.log(e);
  });

  await fs.mkdir(path.dirname(checkerPath), { recursive: true });

  if (compiled) {
    await fs.writeFile(
      checkerPath,
      `/* AUTO-GENERATED BY \`@astro-content/validator\`. Do not edit! */

import { itemChecker } from '@astro-content/validator';

const schema = ${JSON.stringify(schema)}
export { schema };

${compiled}
export function check${iFace}(item: unknown) {
  return itemChecker<${iFace}>(item, '${schemaPath}');
}
`,
    );
  }
}

export async function generateAllCheckers(outDir: string | undefined) {
  const schemas = await glob(`src/**/*.schema.yaml`);

  await Promise.all(
    schemas.map(async (p) => {
      await generateChecker(p, outDir).catch((e) => console.log(e));
    }),
  ).catch((e) => console.log(e));
}
